<?php
/**
 * Order
 *
 * @author    Pronamic <info@pronamic.eu>
 * @copyright 2005-2018 Pronamic
 * @license   GPL-3.0-or-later
 * @package   Pronamic\WordPress\Pay\Gateways\OmniKassa2
 */

namespace Pronamic\WordPress\Pay\Gateways\OmniKassa2;

use Pronamic\WordPress\Pay\Core\Util;
use Pronamic\WordPress\Pay\Payments\Items;

/**
 * Order
 *
 * @author  Remco Tolsma
 * @version 2.0.2
 * @since   1.0.0
 */
class Order extends Message {
	/**
	 * ISO 8601 standard Date / time on which the order is announced at ROK.
	 * As a rule, this is the current date / time.
	 *
	 * This field is mandatory and provides protection against so-called
	 * replay (playback) attacks
	 *
	 * @var string
	 */
	private $timestamp;

	/**
	 * Generated by Merchant. If your webshop wants to use AfterPay, this field must be unique.
	 *
	 * @var string
	 */
	private $merchant_order_id;

	/**
	 * Description of the order.
	 *
	 * @var string
	 */
	private $description;

	/**
	 * The order items.
	 *
	 * @var OrderItems
	 */
	private $order_items;

	/**
	 * Amount.
	 *
	 * @var Money
	 */
	private $amount;

	/**
	 * The shipping address.
	 *
	 * @var Address
	 */
	private $shipping_detail;

	/**
	 * The billing address.
	 *
	 * @var Address
	 */
	private $billing_detail;

	/**
	 * The customer information.
	 *
	 * @var CustomerInformation
	 */
	private $customer_information;

	/**
	 * Language.
	 *
	 * ISO 639-1 standard. Not Case sensitive.
	 *
	 * @var string
	 */
	private $language;

	/**
	 * Merchant return URL.
	 *
	 * The URL to which the consumer's browser will be sent after the payment.
	 *
	 * @var string
	 */
	private $merchant_return_url;

	/**
	 * Payment brand.
	 *
	 * This field is optional and is used to enforce a specific
	 * payment method with the consumer instead of the consumer
	 * selecting a payment method on the payment method selection
	 * page.
	 *
	 * Valid values are:
	 * • IDEAL
	 * • AFTERPAY
	 * • PAYPAL
	 * • MASTERCARD
	 * • VISA
	 * • BANCONTACT
	 * • MAESTRO
	 * • V_PAY
	 * • CARDS
	 *
	 * The CARDS value ensures that the consumer can choose
	 * between payment methods: MASTERCARD, VISA, BANCONTACT,
	 * MAESTRO and V_PAY
	 *
	 * @var string|null
	 */
	private $payment_brand;

	/**
	 * Payment brand force.
	 *
	 * This field should only be delivered if the paymentBrand field (see
	 * above) is also specified. This field can be used to send or, after
	 * a failed payment, the consumer can or can not select another payment
	 * method to still pay the payment.
	 *
	 * Valid values are:
	 * • FORCE_ONCE
	 * • FORCE_ALWAYS
	 *
	 * In the case of FORCE_ONCE, the indicated paymentBrand is only
	 * enforced on the first transaction. If this fails, the consumer
	 * can still choose another payment method. When FORCE_ALWAYS is
	 * chosen, the consumer can not choose another payment method.
	 *
	 * @var string|null
	 */
	private $payment_brand_force;

	/**
	 * Construct order.
	 *
	 * @param string $merchant_order_id    Merchant order ID.
	 * @param Money  $amount               Amount.
	 * @param string $merchant_return_url  Merchant return URL.
	 */
	public function __construct( $merchant_order_id, $amount, $merchant_return_url ) {
		$this->timestamp           = date( DATE_ATOM );
		$this->merchant_order_id   = $merchant_order_id;
		$this->amount              = $amount;
		$this->merchant_return_url = $merchant_return_url;
	}

	/**
	 * Set description.
	 *
	 * @param string $description Description.
	 */
	public function set_description( $description ) {
		$this->description = $description;
	}

	/**
	 * Set language.
	 *
	 * @param string $language Language.
	 */
	public function set_language( $language ) {
		$this->language = $language;
	}

	/**
	 * Set payment brand.
	 *
	 * @param string|null $payment_brand Payment brand.
	 */
	public function set_payment_brand( $payment_brand ) {
		$this->payment_brand = $payment_brand;
	}

	/**
	 * Set payment brand force.
	 *
	 * @param string $payment_brand_force Payment brand force.
	 */
	public function set_payment_brand_force( $payment_brand_force ) {
		$this->payment_brand_force = $payment_brand_force;
	}

	/**
	 * Set order items.
	 *
	 * @param Items $items Payment items.
	 *
	 * @return void
	 */
	public function set_order_items( Items $items ) {
		$order_items = new OrderItems();

		$items = $items->getIterator();

		while ( $items->valid() ) {
			$item = $items->current();

			// New order item.
			$order_item = new OrderItem(
				array(
					'id'       => $item->get_id(),
					'name'     => $item->get_description(),
					'quantity' => $item->get_quantity(),
					'amount'   => new Money(
						$this->amount->get_currency(),
						Util::amount_to_cents( $item->get_price() )
					),
					'category' => ProductCategories::DIGITAL,
				)
			);

			// Add order item.
			$order_items->add_item( $order_item );

			$items->next();
		}

		$this->order_items = $order_items;
	}

	/**
	 * Set shipping detail.
	 *
	 * @param Address $shipping_detail Shipping address details.
	 */
	public function set_shipping_detail( Address $shipping_detail ) {
		$this->shipping_detail = $shipping_detail;
	}

	/**
	 * Set billing detail.
	 *
	 * @param Address $billing_detail Billing address details.
	 */
	public function set_billing_detail( Address $billing_detail ) {
		$this->billing_detail = $billing_detail;
	}

	/**
	 * Set customer information.
	 *
	 * @param CustomerInformation $customer_information Customer information.
	 */
	public function set_customer_information( CustomerInformation $customer_information ) {
		$this->customer_information = $customer_information;
	}

	/**
	 * Get JSON object.
	 *
	 * @return object
	 */
	public function get_json() {
		$data = array(
			'timestamp'       => $this->timestamp,
			'merchantOrderId' => $this->merchant_order_id,
			'description'     => $this->description,
		);

		if ( null !== $this->order_items ) {
			$data['orderItems'] = $this->order_items->get_json();
		}

		$data['amount'] = $this->amount->get_json();

		if ( null !== $this->shipping_detail ) {
			$data['shippingDetail'] = $this->shipping_detail->get_json();
		}

		if ( null !== $this->billing_detail ) {
			$data['billingDetail'] = $this->billing_detail->get_json();
		}

		if ( null !== $this->customer_information ) {
			$data['customerInformation'] = $this->customer_information->get_json();
		}

		$data['language']          = $this->language;
		$data['merchantReturnURL'] = $this->merchant_return_url;
		$data['paymentBrand']      = $this->payment_brand;
		$data['paymentBrandForce'] = $this->payment_brand_force;

		return (object) $data;
	}

	/**
	 * Get signature data.
	 *
	 * @return array
	 */
	public function get_signature_data() {
		// Required fields.
		$fields = array(
			$this->timestamp,
			$this->merchant_order_id,
			$this->amount->get_currency(),
			$this->amount->get_amount(),
			$this->language,
			$this->description,
			$this->merchant_return_url,
		);

		// Optional fields.
		$optional = array();

		if ( null !== $this->order_items ) {
			$optional['order_items'] = $this->order_items->get_signature_data();
		}

		if ( null !== $this->shipping_detail ) {
			$optional['shipping_detail'] = $this->shipping_detail->get_signature_data();
		}

		$optional['payment_brand']       = $this->payment_brand;
		$optional['payment_brand_force'] = $this->payment_brand_force;

		if ( null !== $this->customer_information ) {
			$optional['customer_information'] = $this->customer_information->get_signature_data();
		}

		if ( null !== $this->billing_detail ) {
			$optional['billing_detail'] = $this->billing_detail->get_signature_data();
		}

		// Remove empty optional fields.
		$optional = array_filter( $optional );

		return array_merge( $fields, $optional );
	}
}
